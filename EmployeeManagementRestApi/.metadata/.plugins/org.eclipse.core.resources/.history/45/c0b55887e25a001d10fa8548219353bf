package com.employeemanagement.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.employeemanagement.model.User;
import com.employeemanagement.repository.UserRepository;

@Configuration
public class ApplicationSecurityConfiguration extends WebSecurityConfigurerAdapter{

	protected void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception{
		
		authenticationManagerBuilder
		.inMemoryAuthentication()
		.withUser("Peeyush")
		.password(passwordEncoder().encode("password"))
		.roles("USER")
		.and()
		.withUser("Nishant")
		.password(passwordEncoder().encode("password"))
		.roles("ADMIN");
	}
	
	
	@Override
	protected void configure(HttpSecurity httpSecurity) throws Exception{
		httpSecurity.cors().disable();
		httpSecurity.csrf().disable();
		httpSecurity
		.authorizeRequests()
		.antMatchers(HttpMethod.GET,"/api/employee/**")
		.hasAnyRole("USER","ADMIN")
		.and()
		.authorizeRequests()
		.antMatchers(HttpMethod.POST,"/api/employee/**")
		.hasAnyRole("ADMIN")
		.and()
		.authorizeRequests()
		.antMatchers(HttpMethod.PUT,"/api/employee/**")
		.hasAnyRole("ADMIN")
		.and()
		.authorizeRequests()
		.antMatchers(HttpMethod.DELETE,"/api/employee/**")
		.hasAnyRole("ADMIN")
		.anyRequest()
		.authenticated()
		.and()
		.formLogin()
		.and()
		.httpBasic()
		.and()
		.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
		
	}
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
}
